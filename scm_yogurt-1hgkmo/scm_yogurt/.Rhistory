library(tidyverse)
library(reticulate)
library(shiny)
scmsim <- reticulate::import("scmsim_r")
data_out <- scmsim$run(mfgqty_mu = 100, #input$mfgqty_mu_input,
mfgqty_sigma = 5, #input$mfgqty_sigma_input,
l_mfggroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_mfgshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of mfg of product (blood types donated),
#assume identical to population distribution
lifetime = 42, #approximate 42 days before persishing
dmndqty_mu = 33.0,
dmndqty_sigma = 1.0,
#for each patient blood type, list the blood types that the patient can receive, and in preference order.
#does not need to be in same order as manufacturing (above),but in same order as l_dmndprefprobs (probability of demand)
l_dmndprefs = list(tuple("OPos","ONeg"), #OPos receipt possibilities
tuple("ONeg", "ONeg"), #ONeg
tuple("APos","OPos","ONeg" ), #apos
tuple("ANeg","ONeg"), #Aneg
tuple("BPos","OPos","ONeg"), #BPos
tuple("BNeg","ONeg"), #BNeg
tuple("ABPos","ABNeg","APos","ANeg","BPos","BNeg","OPos","ONeg"), #ABPos
tuple("ABNeg","ANeg","BNeg","ONeg")
),
l_dmndprefprobs = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of demand by blood type
#(matches population distribution)
n_warehouses = as.integer(3), #number of demand points 3L
supplierqty_mu = 33.33, #mean and stdev (normally distribuution) of liters needed per day, per warehouse
supplierqty_sigma = 1.0,
#next two arguments: probability of DC (warehouse) ordering from manufactuer (blood donation center)
l_supplyprodgroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_supplyprodshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # % share of blood types
l_deliveryleadtimes = list(7,7,7), # leadtime from MFG to each DC, including testing time. 7 days for example
# need to figure out how to parameterize this with the necessary format.
simlength = 100 #days
)
# test outputs for verification
View(data_out)
data_out <- scmsim$run(mfgqty_mu = 100, #input$mfgqty_mu_input,
mfgqty_sigma = 5, #input$mfgqty_sigma_input,
l_mfggroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_mfgshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of mfg of product (blood types donated),
#assume identical to population distribution
lifetime = 42, #approximate 42 days before persishing
dmndqty_mu = 33.0,
dmndqty_sigma = 1.0,
#for each patient blood type, list the blood types that the patient can receive, and in preference order.
#does not need to be in same order as manufacturing (above),but in same order as l_dmndprefprobs (probability of demand)
l_dmndprefs = list(tuple("OPos","ONeg"), #OPos receipt possibilities
tuple("ONeg"), #ONeg
tuple("APos","OPos","ONeg" ), #apos
tuple("ANeg","ONeg"), #Aneg
tuple("BPos","OPos","ONeg"), #BPos
tuple("BNeg","ONeg"), #BNeg
tuple("ABPos","ABNeg","APos","ANeg","BPos","BNeg","OPos","ONeg"), #ABPos
tuple("ABNeg","ANeg","BNeg","ONeg")
),
l_dmndprefprobs = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of demand by blood type
#(matches population distribution)
n_warehouses = as.integer(3), #number of demand points 3L
supplierqty_mu = 33.33, #mean and stdev (normally distribuution) of liters needed per day, per warehouse
supplierqty_sigma = 1.0,
#next two arguments: probability of DC (warehouse) ordering from manufactuer (blood donation center)
l_supplyprodgroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_supplyprodshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # % share of blood types
l_deliveryleadtimes = list(7,7,7), # leadtime from MFG to each DC, including testing time. 7 days for example
# need to figure out how to parameterize this with the necessary format.
simlength = 100 #days
)
# test outputs for verification
View(data_out)
print(1)
print(data_output %>% filter(entity == "manufacturer 1") %>% sum(fulfilled))
print(data_out %>% filter(entity == "manufacturer 1") %>% sum(fulfilled))
print(data_out %>% filter(entity == "manufacturer 1") %>% sum(data_out$fulfilled))
print(data_out %>% filter(entity == "manufacturer 1") %>% sum(data_out$fulfilled))
data_out %>% filter(entity == "manufacturer 1") %>% subset(fulfilled)
data_out %>% filter(entity == "manufacturer 1") %>% dplyr::select(fulfilled)
data_out %>% filter(entity == "manufacturer 1") %>% dplyr::select(fulfilled) %>% sum()
data_out %>% filter(entity == "manufacturer 1") %>% sum(dplyr::select(fulfilled))
data_out %>% filter(entity == "manufacturer 1") %>% sum(dplyr::select(fulfilled))
data_out %>% filter(entity == "manufacturer 1") %>% dplyr::select(fulfilled)
data_out %>% filter(entity == "manufacturer 1") %>% dplyr::select(fulfilled) %>% sum()
data_out %>% filter(entity == "manufacturer 1") %>% dplyr::select(fulfilled) %>% sum()
data_out %>% filter(entity == "manufacturer 1") %>% dplyr::select(fulfilled)
fullfillments_manufacturer = data_out %>% filter(entity == "manufacturer 1") %>% dplyr::select(fulfilled)
print(sum(fullfillments_manufacturer))
fullfillments_manufacturer = data_out %>% filter(entity == "manufacturer 1") %>% dplyr::select(fulfilled)
print(sum(fullfillments_manufacturer))
fullfillments_manufacturer = data_out %>% filter(entity == "manufacturer 1") %>% filter(fulfilled == TRUE) %>% length()
data_out %>% filter(entity == "manufacturer 1") %>% filter(fulfilled == TRUE) %>% length()
data_out %>% filter(entity == "manufacturer 1") %>% filter(fulfilled == TRUE)
data_out %>% filter(entity == "manufacturer 1") %>% filter(fulfilled == TRUE) %>% sum(fulfilled)
data_out %>% filter(entity == "manufacturer 1") %>% group_by(fulfilled) %>¨summarise(sum())
data_out %>% filter(entity == "manufacturer 1") %>% group_by(fulfilled) %>%¨summarise(sum())
data_out %>% filter(entity == "manufacturer 1") %>% group_by(fulfilled) %>% summarise(sum())
?summarise
data_out %>% filter(entity == "manufacturer 1") %>% group_by(fulfilled) %>% summarise(sum = sum(fulfilled))
data_out %>% filter(entity == "manufacturer 1") %>% filter(fulfilled == TRUE) %>% count()
data_out %>% filter(entity == "manufacturer 1") %>% filter(fulfilled == TRUE) %>% count()
data_out %>% filter(entity == "warehouse 1") %>% filter(fulfilled == TRUE) %>% count()
data_out %>% filter(entity == "warehouse 2") %>% filter(fulfilled == TRUE) %>% count()
data_out %>% filter(entity == "warehouse 3") %>% filter(fulfilled == TRUE) %>% count()
library(tidyverse)
library(reticulate)
library(shiny)
reticulate::virtualenv_create()
virtualenv_install(requirements = "requirements.txt")
scmsim <- reticulate::import("scmsim_r")
sim_data = reactive({
data_out <- scmsim$run(mfgqty_mu = 100, #input$mfgqty_mu_input,
mfgqty_sigma = 5, #input$mfgqty_sigma_input,
l_mfggroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_mfgshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of mfg of product (blood types donated),
#assume identical to population distribution
lifetime = 42, #approximate 42 days before persishing
dmndqty_mu = 33.0,
dmndqty_sigma = 1.0,
#for each patient blood type, list the blood types that the patient can receive, and in preference order.
#does not need to be in same order as manufacturing (above),but in same order as l_dmndprefprobs (probability of demand)
l_dmndprefs = list(tuple("OPos","ONeg"), #OPos receipt possibilities
tuple("ONeg"), #ONeg
tuple("APos","OPos","ONeg" ), #apos
tuple("ANeg","ONeg"), #Aneg
tuple("BPos","OPos","ONeg"), #BPos
tuple("BNeg","ONeg"), #BNeg
tuple("ABPos","ABNeg","APos","ANeg","BPos","BNeg","OPos","ONeg"), #ABPos
tuple("ABNeg","ANeg","BNeg","ONeg")
),
l_dmndprefprobs = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of demand by blood type
#(matches population distribution)
n_warehouses = as.integer(3), #number of demand points 3L
supplierqty_mu = 33.33, #mean and stdev (normally distribuution) of liters needed per day, per warehouse
supplierqty_sigma = 1.0,
#next two arguments: probability of DC (warehouse) ordering from manufactuer (blood donation center)
l_supplyprodgroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_supplyprodshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # % share of blood types
l_deliveryleadtimes = list(7,7,7), # leadtime from MFG to each DC, including testing time. 7 days for example
# need to figure out how to parameterize this with the necessary format.
simlength = 100 #days
)
# test outputs for verification
View(data_out)
data_out %>% filter(entity == "manufacturer 1") %>% filter(fulfilled == TRUE) %>% count() # products shipped by manufacturer to warehouses, from its finished goods stock
data_out %>% filter(entity == "warehouse 1") %>% filter(fulfilled == TRUE) %>% count() # products handed to customers at warehouse 1
data_out %>% filter(entity == "warehouse 2") %>% filter(fulfilled == TRUE) %>% count() # see above, warehouse 2
data_out %>% filter(entity == "warehouse 3") %>% filter(fulfilled == TRUE) %>% count() # see above, warehouse 3
data_out$time <- as.numeric(data_out$time)
data_out$time <- floor(data_out$time)
data_out$fulfilled <- as.logical(data_out$fulfilled)
data_out
})
data_out <- scmsim$run(mfgqty_mu = 1000, #input$mfgqty_mu_input,
mfgqty_sigma = 5, #input$mfgqty_sigma_input,
l_mfggroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_mfgshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of mfg of product (blood types donated),
#assume identical to population distribution
lifetime = 42, #approximate 42 days before persishing
dmndqty_mu = 333.33,
dmndqty_sigma = 1.0,
#for each patient blood type, list the blood types that the patient can receive, and in preference order.
#does not need to be in same order as manufacturing (above),but in same order as l_dmndprefprobs (probability of demand)
l_dmndprefs = list(tuple("OPos","ONeg"), #OPos receipt possibilities
tuple("ONeg"), #ONeg
tuple("APos","OPos","ONeg" ), #apos
tuple("ANeg","ONeg"), #Aneg
tuple("BPos","OPos","ONeg"), #BPos
tuple("BNeg","ONeg"), #BNeg
tuple("ABPos","ABNeg","APos","ANeg","BPos","BNeg","OPos","ONeg"), #ABPos
tuple("ABNeg","ANeg","BNeg","ONeg")
),
l_dmndprefprobs = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of demand by blood type
#(matches population distribution)
n_warehouses = as.integer(3), #number of demand points 3L
supplierqty_mu = 333.33, #mean and stdev (normally distribuution) of liters needed per day, per warehouse
supplierqty_sigma = 1.0,
#next two arguments: probability of DC (warehouse) ordering from manufactuer (blood donation center)
l_supplyprodgroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_supplyprodshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # % share of blood types
l_deliveryleadtimes = list(7,7,7), # leadtime from MFG to each DC, including testing time. 7 days for example
# need to figure out how to parameterize this with the necessary format.
simlength = 300 #days
)
data_out %>% filter(entity == "manufacturer 1") %>% filter(fulfilled == TRUE) %>% count() # products shipped by manufacturer to warehouses, from its finished goods stock
data_out %>% filter(entity == "warehouse 1") %>% filter(fulfilled == TRUE) %>% count() # products handed to customers at warehouse 1
data_out %>% filter(entity == "warehouse 2") %>% filter(fulfilled == TRUE) %>% count() # see above, warehouse 2
data_out %>% filter(entity == "warehouse 3") %>% filter(fulfilled == TRUE) %>% count() # see above, warehouse 3
library(tidyverse)
library(reticulate)
library(shiny)
scmsim <- reticulate::import("scmsim_r")
data_out <- scmsim$run(mfgqty_mu = 1000, #input$mfgqty_mu_input,
mfgqty_sigma = 5, #input$mfgqty_sigma_input,
l_mfggroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_mfgshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of mfg of product (blood types donated),
#assume identical to population distribution
lifetime = 42, #approximate 42 days before persishing
dmndqty_mu = 333.33,
dmndqty_sigma = 1.0,
#for each patient blood type, list the blood types that the patient can receive, and in preference order.
#does not need to be in same order as manufacturing (above),but in same order as l_dmndprefprobs (probability of demand)
l_dmndprefs = list(tuple("OPos","ONeg"), #OPos receipt possibilities
tuple("ONeg"), #ONeg
tuple("APos","OPos","ONeg" ), #apos
tuple("ANeg","ONeg"), #Aneg
tuple("BPos","OPos","ONeg"), #BPos
tuple("BNeg","ONeg"), #BNeg
tuple("ABPos","ABNeg","APos","ANeg","BPos","BNeg","OPos","ONeg"), #ABPos
tuple("ABNeg","ANeg","BNeg","ONeg")
),
l_dmndprefprobs = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of demand by blood type
#(matches population distribution)
n_warehouses = as.integer(3), #number of demand points 3L
supplierqty_mu = 333.33, #mean and stdev (normally distribuution) of liters needed per day, per warehouse
supplierqty_sigma = 1.0,
#next two arguments: probability of DC (warehouse) ordering from manufactuer (blood donation center)
l_supplyprodgroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_supplyprodshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # % share of blood types
l_deliveryleadtimes = list(7,7,7), # leadtime from MFG to each DC, including testing time. 7 days for example
# need to figure out how to parameterize this with the necessary format.
simlength = 300 #days
)
data_out %>% filter(entity == "manufacturer 1") %>% filter(fulfilled == TRUE) %>% count() # products shipped by manufacturer to warehouses, from its finished goods stock
data_out %>% filter(entity == "warehouse 1") %>% filter(fulfilled == TRUE) %>% count() # products handed to customers at warehouse 1
data_out %>% filter(entity == "warehouse 2") %>% filter(fulfilled == TRUE) %>% count() # see above, warehouse 2
data_out %>% filter(entity == "warehouse 3") %>% filter(fulfilled == TRUE) %>% count() # see above, warehouse 3
scmsim <- reticulate::import("scmsim_r")
data_out <- scmsim$run(
mfgqty_mu = 6.91, #input$mfgqty_mu_input,
mfgqty_sigma = 0.0001, #input$mfgqty_sigma_input,
mfg_normal = FALSE,
l_mfggroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_mfgshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of mfg of product (blood types donated),
#assume identical to population distribution
lifetime = 42, #approximate 42 days before persishing
dmndqty_mu = 5.8,
dmndqty_sigma = 0.0001,
dmnd_normal = FALSE,
#for each patient blood type, list the blood types that the patient can receive, and in preference order.
#does not need to be in same order as manufacturing (above),but in same order as l_dmndprefprobs (probability of demand)
l_dmndprefs = list(tuple("OPos","ONeg"), #OPos receipt possibilities
tuple("ONeg"), #ONeg
tuple("APos","OPos","ONeg" ), #apos
tuple("ANeg","ONeg"), #Aneg
tuple("BPos","OPos","ONeg"), #BPos
tuple("BNeg","ONeg"), #BNeg
tuple("ABPos","ABNeg","APos","ANeg","BPos","BNeg","OPos","ONeg"), #ABPos
tuple("ABNeg","ANeg","BNeg","ONeg")
),
l_dmndprefprobs = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of demand by blood type
#(matches population distribution)
n_warehouses = as.integer(3), #number of demand points 3L
supplierqty_mu = 5.8, #mean and stdev (normally distribuution) of liters needed per day, per warehouse
supplierqty_sigma = 0.0001,
supplier_normal= FALSE,
#next two arguments: probability of DC (warehouse) ordering from manufactuer (blood donation center)
l_supplyprodgroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_supplyprodshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # % share of blood types
l_deliveryleadtimes = list(7,7,7), # leadtime from MFG to each DC, including testing time. 7 days for example
# need to figure out how to parameterize this with the necessary format.
simlength = 300 #days
)
library(tidyverse)
library(reticulate)
library(shiny)
data_out <- scmsim$run(
mfgqty_mu = 6.91, #input$mfgqty_mu_input,
mfgqty_sigma = 0.0001, #input$mfgqty_sigma_input,
mfg_normal = FALSE,
l_mfggroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_mfgshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of mfg of product (blood types donated),
#assume identical to population distribution
lifetime = 42, #approximate 42 days before persishing
dmndqty_mu = 5.8,
dmndqty_sigma = 0.0001,
dmnd_normal = FALSE,
#for each patient blood type, list the blood types that the patient can receive, and in preference order.
#does not need to be in same order as manufacturing (above),but in same order as l_dmndprefprobs (probability of demand)
l_dmndprefs = list(tuple("OPos","ONeg"), #OPos receipt possibilities
tuple("ONeg"), #ONeg
tuple("APos","OPos","ONeg" ), #apos
tuple("ANeg","ONeg"), #Aneg
tuple("BPos","OPos","ONeg"), #BPos
tuple("BNeg","ONeg"), #BNeg
tuple("ABPos","ABNeg","APos","ANeg","BPos","BNeg","OPos","ONeg"), #ABPos
tuple("ABNeg","ANeg","BNeg","ONeg")
),
l_dmndprefprobs = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of demand by blood type
#(matches population distribution)
n_warehouses = as.integer(3), #number of demand points 3L
supplierqty_mu = 5.8, #mean and stdev (normally distribuution) of liters needed per day, per warehouse
supplierqty_sigma = 0.0001,
supplier_normal= FALSE,
#next two arguments: probability of DC (warehouse) ordering from manufactuer (blood donation center)
l_supplyprodgroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_supplyprodshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # % share of blood types
l_deliveryleadtimes = list(7,7,7), # leadtime from MFG to each DC, including testing time. 7 days for example
# need to figure out how to parameterize this with the necessary format.
simlength = 300 #days
)
data_out %>% filter(entity == "manufacturer 1") %>% filter(fulfilled == TRUE) %>% count() # products shipped by manufacturer to warehouses, from its finished goods stock
data_out %>% filter(entity == "warehouse 1") %>% filter(fulfilled == TRUE) %>% count() # products handed to customers at warehouse 1
data_out %>% filter(entity == "warehouse 2") %>% filter(fulfilled == TRUE) %>% count() # see above, warehouse 2
data_out %>% filter(entity == "warehouse 3") %>% filter(fulfilled == TRUE) %>% count() # see above, warehouse 3
library(tidyverse)
library(reticulate)
library(shiny)
rm(list=ls())
gc(T,T,T) # activates garbage collection
reticulate::virtualenv_create()
virtualenv_install(requirements = "requirements.txt")
scmsim <- reticulate::import("scmsim_r")
data_out <- scmsim$run(
mfgqty_mu = 6.91, # input$mfgqty_mu_input,
mfgqty_sigma = 0.0001, # input$mfgqty_sigma_input,
mfg_normal = FALSE,
l_mfggroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), # bloodtypes
l_mfgshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # share of mfg of product (blood types donated),
# assume identical to population distribution
lifetime = 42, # approximate 42 days before persishing
dmndqty_mu = 5.8,
dmndqty_sigma = 0.0001,
dmnd_normal = FALSE,
# for each patient blood type, list the blood types that the patient can receive, and in preference order.
# does not need to be in same order as manufacturing (above),but in same order as l_dmndprefprobs (probability of demand)
l_dmndprefs = list(tuple("OPos","ONeg"), # OPos receipt possibilities
tuple("ONeg"), #ONeg
tuple("APos","OPos","ONeg" ), #apos
tuple("ANeg","ONeg"), #Aneg
tuple("BPos","OPos","ONeg"), #BPos
tuple("BNeg","ONeg"), #BNeg
tuple("ABPos","ABNeg","APos","ANeg","BPos","BNeg","OPos","ONeg"), #ABPos
tuple("ABNeg","ANeg","BNeg","ONeg")
),
l_dmndprefprobs = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # #share of demand by blood type
# (matches population distribution)
n_warehouses = as.integer(3), # number of demand points 3L
supplierqty_mu = 5.8,         # mean and stdev (normally distribuution) of liters needed per day, per warehouse
supplierqty_sigma = 0.0001,
supplier_normal= FALSE,
# next two arguments: probability of DC (warehouse) ordering from manufactuer (blood donation center)
l_supplyprodgroups = list("OPos","ONeg","APos","ANeg","BPos","BNeg","ABPos","ABNeg"), #bloodtypes
l_supplyprodshares = list(0.38,0.07,0.34,0.06,0.09,0.02,0.03,0.01), # % share of blood types
l_deliveryleadtimes = list(7,7,7), # leadtime from MFG to each DC, including testing time. 7 days for example
# need to figure out how to parameterize this with the necessary format.
simlength = 100 # days
)
# test outputs for verification
View(data_out)
View(data_out)
hist(data_out$fulfilled)
hist(data_out$time)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
clear(list=ls())
clear()
rm(list=ls())
shiny::runApp()
runApp()
?reactiveValues
?runif
rm(list = ls())
library(tidyverse)
library(reticulate)
library(shiny)
library(ggplot2)
rm(list=ls())
gc(T,T,T) # activates garbage collection
reticulate::virtualenv_create()
scmsim <- reticulate::import("scmsim_r")
scmsim$test()
library(tidyverse)
library(reticulate)
library(shiny)
library(ggplot2)
rm(list=ls())
gc(T,T,T) # activates garbage collection
reticulate::virtualenv_create()
scmsim <- reticulate::import("scmsim_r")
virtualenv_install(requirements = "C:\\Users\\FELI03\\Desktop\\localdir\\github\\repos_linnart\\simpyprojects\\scm_yogurt\\requirements.txt")
# get the simualted results as a dataframe
df = scmsim$run(
mfgqty_mu     = input$mfgqty_mu,
mfgqty_sigma  = input$mfgqty_sigma,
mfg_normal    = input$mfg_normal,
l_mfggroups   = list(
"strawberry",
"blueberry",
"apple"),
l_mfgshares   = list(input$mfgshare_strawberry,
input$mfgshare_blueberry,
input$mfgshare_apple),
lifetime      = input$lifetime,
dmndqty_mu    = input$dmndqty_mu,
dmndqty_sigma = input$dmndqty_sigma,
dmnd_normal   = input$dmnd_normal,
l_dmndprefs   = list(
tuple("strawberry"),
tuple("strawberry", "blueberry"),
tuple("blueberry"),
tuple("blueberry", "strawberry"),
tuple("apple")
),
l_dmndprefprobs = list(
input$dmndprefproc_s,
input$dmndprefproc_sb,
input$dmndprefproc_b,
input$dmndprefproc_bs,
input$dmndprefproc_a
),
n_warehouses        = as.integer(input$n_warehouses),
supplierqty_mu      = input$purchaseqty_mu,
supplierqty_sigma   = input$purchaseqty_sigma,
supplier_normal     = input$mfg_normal,
l_supplyprodgroups  = list(
"strawberry",
"blueberry",
"apple"
),
l_supplyprodshares  = list(
input$purchaseshare_strawberry,
input$purchaseshare_blueberry,
input$purchaseshare_apple
),
l_deliveryleadtimes = list(
input$deliveryleadtime,
input$deliveryleadtime,
intput$deliveryleadtime
),
simlength           = input$simlength
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sum(c(TRUE,FALSE,TRUE))
round(1.1)
round(0.1)
n(c(1,2,3))
count(c(1,2,3))
length(c(1,2,3))
?geom_line
?aes
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
sum(c(1,2,3))
runApp()
runApp()
runApp()
runApp()
runApp()
?sapply
sapply(c(1.1,1.2,2.2),round())
lapply(c(1.1,2.2,3.3,0.1),round)
x = lapply(c(1.1,1.2,0.1,2.2,10.9),round)
x
x[0]
x[1]
x[2]
x[3]
plot(x,x)
runApp()
runApp()
as.integer(c(1.1,2.1))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_col
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
!c(FALSE,FALSE)
sum(!c(FALSE,TRUE))
sum!(!(FALSE,FALSE))
runApp()
as.character(tuple("strawberry"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
